// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        mavenLocal()
        mavenCentral()

    }
    ext {
        compileSdkVersion = 30
        buildToolsVersion = '28.0.3'
        supportLibVersion = "28.0.0"
        googlePlayServicesVersion = "16.0.0"
        googlePlayServicesVisionVersion = "19.0.0"
        androidMapsUtilsVersion = "0.5+"
        androidXCore = "1.0.2"
        kotlinVersion = "1.5.31" // Or any other kotlin version following 1.3.x
        RNNKotlinVersion = kotlinVersion
        RNNKotlinStdlib = "kotlin-stdlib-jdk8"
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        maven { url 'https://www.jitpack.io' }
        maven {
            // All of Detox' artifacts are provided via the npm module
            url "$rootDir/../node_modules/detox/Detox-android"
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/jsc-android/dist")
        }

    }
}

subprojects {

    afterEvaluate {
        project ->
            if (project.hasProperty("android")) {
                android {
                    compileSdkVersion 30
                    buildToolsVersion '28.0.3'
                }
            }
            if ((project.plugins.hasPlugin('android') || project.plugins.hasPlugin('android-library'))) {
                android {
                    variantFilter { variant ->
                        def names = variant.flavors*.name
                        if (names.contains("reactNative51") || names.contains("reactNative55") || names.contains("reactNative57") || names.contains("reactNative57_5") || names.contains("reactNative59_8") || names.contains("reactNative60") || names.contains("reactNative61") || names.contains("reactNative62")) {
                            setIgnore(true)
                        }
                    }
                }
            }
    }
}
